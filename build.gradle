import com.android.build.gradle.BasePlugin
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    alias libs.plugins.android.application
    alias libs.plugins.android.library apply false
    alias libs.plugins.kotlin
    alias libs.plugins.google.protobuf
    id "foundation.e.bliss.spotless"
    id "foundation.e.bliss.githooks"
}

afterEvaluate {
    tasks.prepareKotlinBuildScriptModel.dependsOn(tasks.copyGitHooks, tasks.installGitHooks)
}

allprojects {
    plugins.withType(BasePlugin).configureEach {
        project.android {
            compileSdk 33

            defaultConfig {
                minSdk 28
                targetSdk 33
                vectorDrawables.useSupportLibrary = true
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }

            lint {
                abortOnError true
                checkReleaseBuilds false
            }
        }

        project.dependencies {
            implementation libs.androidx.core
        }
    }

    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_1_8
        }
    }

    ext.addFrameworkJar = { String path ->
        def frameworkJar = new File(rootProject.projectDir, 'prebuilts/' + path)
        if (!frameworkJar.exists()) {
            throw new IllegalArgumentException("Framework jar path doesn't exist")
        }
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.bootstrapClasspath = files([frameworkJar] + (options.bootstrapClasspath.files as Iterable<File>))
            }
            tasks.withType(KotlinCompile) {
                it.libraries.setFrom(files([frameworkJar] + it.libraries.getFrom()))
            }
        }
    }
}

android {
    namespace "com.android.launcher3"
    useLibrary "android.test.mock"

    defaultConfig {
        versionCode 33
        versionName "13"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debugConfig {
            storeFile file("$rootDir/keystore/testkey.jks")
            storePassword 'testkey'
            keyAlias 'testkey'
            keyPassword 'testkey'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debugConfig
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions.addAll("app", "recents")
    productFlavors {
        aosp {
            dimension "app"
            applicationId 'com.android.launcher3'
        }

        l3go {
            dimension "app"
            applicationId 'com.android.launcher3'
        }

        bliss {
            dimension "app"
            applicationId 'com.android.launcher3'
            isDefault true
        }

        withQuickstep {
            dimension "recents"
            minSdkVersion 33
        }

        withoutQuickstep {
            dimension "recents"
        }

        configureEach {
            resValue("string", "quickstep_component", "${applicationId}/com.android.launcher3.uioverrides.QuickstepLauncher")
            resValue("string", "launcher_component", "${applicationId}/com.android.launcher3.Launcher")
        }
    }

    // Disable release builds for now
    variantFilter { variant ->
        if (variant.buildType.name.endsWith('release')) {
            variant.setIgnore(true)
        }
    }

    sourceSets {
        main {
            res.srcDirs = ['res']
            java.srcDirs = ['src', 'src_plugins']
            manifest.srcFile 'AndroidManifest-common.xml'
            proto {
                srcDirs = ['protos/', 'quickstep/protos_overrides/']
            }
        }

        aosp {
            java.srcDirs = ['src_flags', 'src_shortcuts_overrides']
        }

        aospWithoutQuickstep {
            manifest.srcFile "AndroidManifest.xml"
        }

        aospWithQuickstep {
            manifest.srcFile "quickstep/AndroidManifest-launcher.xml"
        }

        l3go {
            res.srcDirs = ['go/res']
            java.srcDirs = ['go/src']
            manifest.srcFile "go/AndroidManifest.xml"
        }

        l3goWithoutQuickstepDebug {
            manifest.srcFile "AndroidManifest.xml"
        }

        l3goWithQuickstepDebug {
            manifest.srcFile "quickstep/AndroidManifest-launcher.xml"
        }

        bliss {
            java.srcDirs = ['src_flags', 'src_shortcuts_overrides', 'bliss/src']
            res.srcDirs = ['bliss/res', "bliss/res_overrides"]
            manifest.srcFile "bliss/AndroidManifest.xml"
            assets {
                srcDirs 'bliss/assets'
            }
        }

        blissWithoutQuickstep {
            manifest.srcFile "AndroidManifest.xml"
        }

        blissWithQuickstep {
            manifest.srcFile "quickstep/AndroidManifest-launcher.xml"
        }

        withoutQuickstep {
            java.srcDirs = ['src_ui_overrides']
        }

        withQuickstep {
            res.srcDirs = ['quickstep/res', 'quickstep/recents_ui_overrides/res']
            java.srcDirs = ['quickstep/src', 'quickstep/recents_ui_overrides/src']
            manifest.srcFile "quickstep/AndroidManifest.xml"
        }
    }

    addFrameworkJar('framework-13.jar')
}

tasks.register('unzipJar', Copy.class) {
    from zipTree('prebuilts/classes.jar')
    into("$buildDir/libs/classes")
    include "**/*.class"
    exclude "android/**"
    exclude "androidx/**"
    exclude "com/airbnb/**"
    exclude "com/android/launcher3/**"
    exclude "com/android/quickstep/**"
    exclude "com/google/**"
    exclude "kotlin/**"
    exclude "META-INF/**"
    exclude "okio/**"
    exclude "org/**"
}

tasks.register('makeReleaseJar', Jar.class) {
    archiveName('Launcher3QuickStepLib.jar')
    from("$buildDir/libs/classes")
    destinationDir(file('prebuilts'))
}

dependencies {
    api libs.airbnb.lottie
    implementation libs.androidx.dynamicanimation
    implementation libs.androidx.recyclerview
    implementation libs.androidx.preference
    implementation libs.google.protobuf.javalite
    implementation libs.google.material
    implementation libs.androidx.slice.view
    implementation libs.reactivex.rxkotlin3
    implementation libs.hoko.blur

    implementation libs.square.gson
    implementation libs.square.logging
    implementation libs.square.okhttp
    implementation libs.square.retrofit

    implementation project(':IconLoader')
    implementation fileTree(dir: "prebuilts", include: 'Launcher3QuickStepLib.jar')
    implementation fileTree(dir: "prebuilts", include: 'libGoogleFeed.jar')
}

protobuf {
    // Configure the protoc executable
    protoc {
        artifact = "com.google.protobuf:protoc:3.21.12"
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
                java {
                    option "lite"
                }
            }
        }
    }
}
